# ShallowNet V1
def shallowNetv1(input_shape):
    model = Sequential()
    # Block 1
    model.add(Conv2D(96, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C1',
                     input_shape=input_shape))
    model.add(BatchNormalization(name='B1'))
    model.add(Activation('relu', name='A1'))
    model.add(Dropout(0.25, name='O1'))
    model.add(Conv2D(96, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C2'))
    model.add(BatchNormalization(name='B2'))
    model.add(Activation('relu', name='A2'))
    model.add(Dropout(0.25, name='O2'))
    model.add(Conv2D(96, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C3'))
    model.add(BatchNormalization(name='B3'))
    model.add(Activation('relu', name='A3'))
    model.add(MaxPooling2D(pool_size=(3, 3), strides=2, name='P1'))
    model.add(Dropout(0.25, name='O3'))
    # Block 2
    model.add(Conv2D(192, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C4'))
    model.add(BatchNormalization(name='B4'))
    model.add(Activation('relu', name='A4'))
    model.add(Dropout(0.25, name='O4'))
    model.add(Conv2D(192, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C5'))
    model.add(BatchNormalization(name='B5'))
    model.add(Activation('relu', name='A5'))
    model.add(Dropout(0.25, name='O5'))
    model.add(Conv2D(192, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C6'))
    model.add(BatchNormalization(name='B6'))
    model.add(Activation('relu', name='A6'))
    model.add(MaxPooling2D(pool_size=(3, 3), strides=2, name='P2'))
    model.add(Dropout(0.25, name='O6'))
    # Block 3
    model.add(Conv2D(257, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C7'))
    model.add(BatchNormalization(name='B7'))
    model.add(Activation('relu', name='A7'))
    model.add(Dropout(0.25, name='O7'))
    model.add(Conv2D(257, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C8'))
    model.add(BatchNormalization(name='B8'))
    model.add(Activation('relu', name='A8'))
    model.add(Dropout(0.25, name='O8'))
    model.add(Conv2D(257, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C9'))
    model.add(BatchNormalization(name='B9'))
    model.add(Activation('relu', name='A9'))
    model.add(MaxPooling2D(pool_size=(3, 3), strides=2, name='P3'))
    model.add(Dropout(0.25, name='O9'))
    # Block 4
    model.add(Conv2D(311, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C10'))
    model.add(BatchNormalization(name='B10'))
    model.add(Activation('relu', name='A10'))
    model.add(Dropout(0.25, name='O10'))
    model.add(Conv2D(311, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C11'))
    model.add(BatchNormalization(name='B11'))
    model.add(Activation('relu', name='A11'))
    model.add(Dropout(0.25, name='O11'))
    model.add(Conv2D(311, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C12'))
    model.add(BatchNormalization(name='B12'))
    model.add(Activation('relu', name='A12'))
    model.add(MaxPooling2D(pool_size=(3, 3), strides=2, name='P4'))
    model.add(Dropout(0.25, name='O12'))
    # Block 5
    model.add(Conv2D(396, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C13'))
    model.add(BatchNormalization(name='B13'))
    model.add(Activation('relu', name='A13'))
    model.add(Dropout(0.25, name='O13'))
    model.add(Conv2D(396, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C14'))
    model.add(BatchNormalization(name='B14'))
    model.add(Activation('relu', name='A14'))
    model.add(Dropout(0.25, name='O14'))
    model.add(Conv2D(396, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C15'))
    model.add(BatchNormalization(name='B15'))
    model.add(Activation('relu', name='A15'))
    model.add(MaxPooling2D(pool_size=(3, 3), strides=2, name='P5'))
    model.add(Dropout(0.25, name='O15'))
    # Block 6
    model.add(Conv2D(437, (3, 3), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C16'))
    model.add(BatchNormalization(name='B16'))
    model.add(Activation('relu', name='A16'))
    model.add(Dropout(0.25, name='O16'))
    model.add(Conv2D(437, (1, 1), padding='same', kernel_regularizer=regularizers.l2(0.0001), name='C17'))
    model.add(BatchNormalization(name='B17'))
    model.add(Activation('relu', name='A17'))
    model.add(Dropout(0.25, name='O17'))
    # Block 7
    model.add(Flatten(name='F1'))
    model.add(Dense(3933, kernel_regularizer=regularizers.l2(0.0001), name='D1'))
    model.add(BatchNormalization())
    model.add(Dropout(0.25, name='O18'))
    model.add(Dense(2, activation='sigmoid'))
    model.name = 'shallowNetv1'
    return model

# ShallowNet V2
def shallowNetv2(model_input):
    # Block1
    x = Conv2D(96, kernel_size=(3, 3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(0.0001))(
        model_input)
    x = Dropout(0.25)(x)
    x = Conv2D(96, (3, 3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(96, (3, 3), activation='relu', padding='same', strides=2, kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    # Block2
    x = Conv2D(192, (3, 3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(192, (3, 3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(192, (3, 3), activation='relu', padding='same', strides=2, kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    # Block3
    x = Conv2D(192, (3, 3), activation='relu', padding='same', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(192, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    # Block4
    x = Flatten()(x)
    x = Dense(1024, activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = BatchNormalization()(x)
    x = Dropout(0.25)(x)
    x = Dense(2, activation='sigmoid')(x)
    model = Model(model_input, x, name='shallowNetv2')
    return model
	
# ShallowNet V3
def shallowNetv3(model_input):
    # block 1
    x = Conv2D(32, (5, 5), activation='relu', padding='valid', kernel_regularizer=regularizers.l2(0.0001))(model_input)
    x = Dropout(0.25)(x)
    x = Conv2D(32, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(32, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = MaxPooling2D((2, 2))(x)
    x = Dropout(0.25)(x)
    # block 2
    x = Conv2D(64, (3, 3), activation='relu', padding='valid', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(64, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(64, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = MaxPooling2D((2, 2))(x)
    x = Dropout(0.25)(x)
    # block 3
    x = Conv2D(128, (3, 3), activation='relu', padding='valid', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    x = Conv2D(32, (1, 1), activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = Dropout(0.25)(x)
    # block 4
    x = Flatten()(x)
    x = Dense(1024, activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
    x = BatchNormalization()(x)
    x = Dropout(0.25)(x)
    x = Dense(2, activation='sigmoid')(x)
    model = Model(model_input, x, name='shallowNetv3')
    return model
